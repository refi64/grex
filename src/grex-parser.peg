# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

%prefix "grex_parser_impl"

%auxil "Auxil *"
%value "void *"

%header {

#include "grex-parser-private.h"

}

%source {

#include "grex-expression-private.h"

#define PCC_MALLOC(auxil, size) g_malloc(size)
#define PCC_REALLOC(auxil, ptr, size) g_realloc(ptr, size)
#define PCC_GETCHAR(auxil) auxil_nextchar(auxil)
#define PCC_ERROR(auxil) auxil_error

}

start <- e:expr { $$ = e; }

expr <- l:literal { $$ = l; } / e:emit { $$ = e; } / p:prop { $$ = p; }

emit <- 'emit' _ t:emitTarget { $$ = t; }

emitTarget
  <- obj:expr _ ':' _ id:ident _ detail:emitDetail _ a:args {
    AUXIL_GET_LOCATION($0s);
    OWN_OBJ(obj);
    OWN_STR(id);
    OWN_STR(detail);
    g_autoptr(GPtrArray) args = a;
    $$ = grex_signal_expression_new(location, obj, id, detail,
                                    (GrexExpression**)args->pdata, args->len);
  } / id:ident _ detail:emitDetail _ a:args {
    AUXIL_GET_LOCATION($0s);
    OWN_STR(id);
    OWN_STR(detail);
    g_autoptr(GPtrArray) args = a;
    $$ = grex_signal_expression_new(location, NULL, id, detail,
                                    (GrexExpression**)args->pdata, args->len);
  }

emitDetail <- '::' _ detail:ident { $$ = detail; }
            / '' { $$ = NULL; }

args <- '(' _ l:argsList (_ ',')? _ ')' { $$ = l; }
      / '(' _ ')' { $$ = g_ptr_array_new(); }

argsList
  <- l:argsList _ ',' _ arg:expr {
    $$ = l;
    g_ptr_array_add($$, arg);
  } / arg:expr {
    $$ = g_ptr_array_new_with_free_func(g_object_unref);
    g_ptr_array_add($$, arg);
  }

prop
  <- obj:expr _ '.' _ id:ident {
    AUXIL_GET_LOCATION($0s);
    OWN_OBJ(obj);
    OWN_STR(id);
    $$ = grex_property_expression_new(location, obj, id);
  } / id:ident {
    AUXIL_GET_LOCATION($0s);
    OWN_STR(id);
    $$ = grex_property_expression_new(location, NULL, id);
  }

literal <- i:int { $$ = i; } / b:bool { $$ = b; } / s:string { $$ = s; }

int <- < '-'? ('0x'[0-9a-fA-F]+ / [0-9]+) > {
  AUXIL_GET_LOCATION($0s);
  gint64 ival = g_ascii_strtoll($1, NULL, 0);

  g_auto(GValue) value = G_VALUE_INIT;
  g_value_init(&value, G_TYPE_INT64);
  g_value_set_int64(&value, ival);

  $$ = grex_constant_value_expression_new(location, &value);
}

bool <- < 'true' / 'false' > {
  AUXIL_GET_LOCATION($0s);
  gboolean is_true = *$1 == 't';

  g_auto(GValue) value = G_VALUE_INIT;
  g_value_init(&value, G_TYPE_BOOLEAN);
  g_value_set_boolean(&value, is_true);

  $$ = grex_constant_value_expression_new(location, &value);
}

string <- '\'' < ('\\' [nt'\\] / [^'])+ > '\'' {
  AUXIL_GET_LOCATION($0s);
  char *s = process_string_escapes($1);

  g_auto(GValue) value = G_VALUE_INIT;
  g_value_init(&value, G_TYPE_STRING);
  g_value_take_string(&value, s);

  $$ = grex_constant_value_expression_new(location, &value);
}

ident <- < [a-zA-Z][a-zA-Z0-9_\-]* > { $$ = g_strdup($1); }

_ <- [ \r\t]*
